---
import Layout from "@layout";
import "@css/style.css";
import "@css/mlib/library.css";
import "@css/mlib/style.css";
import "@css/mlib/library.css";
import "@css/mlib/themes.css";
---

<Layout title="MLib">
  <div class="music-container">
    <script is:inline type="module" src="/js/mlib/quick.js"></script>
    <div id="menuContent" class="menuContent"></div>
    <div class="scroll-here">
      <h1 class="hide" id="nameTitle">Hello, User!</h1>
      <div class="styleish" id="siteContent">
        <div class="set-bg" id="devTools">
          <h1 class="subheading" id="pageTitle">DevTools</h1>
          <button onclick="setXenBg(); "> Set current album as bg</button>
          <button onclick="localStorage.setItem('autoXenBg', 'on'); "
            >Automatically Change background to AlbumArt</button
          >
          <button onclick="localStorage.setItem('autoNotiSend', 'on'); "
            >Enable Music Notifications</button
          >
        </div>
        <h1 class="subheading"><span>Library</span></h1>
        <br />
        <div id="songsDiv"><!-- lol --></div>
        <div class="slider-container">
          <label style="color: #333; font-size: 0.7vw;" for="song-count"
            >Amount of Songs Displayed</label
          >
          <span
            style="margin-left:1vw; padding-right: 10px; color: #333; font-size: 0.7vw;"
            >1
          </span>
          <input type="range" id="song-count" min="1" max="300" value="50" />

          <span style="padding-left: 10px; color: #333; font-size: 0.7vw;"
            >300</span
          >
        </div>
        <h1 class="subheading-2"><span>Albums</span></h1>
        <div id="albumsDiv"><!-- hehe --></div>

        <div class="top-page-bar">
          <div class="upload-button">
            <label for="f">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="currentColor"
                class="w-6 h-6 upl"
              >
                <path
                  fill-rule="evenodd"
                  d="M11.47 2.47a.75.75 0 011.06 0l4.5 4.5a.75.75 0 01-1.06 1.06l-3.22-3.22V16.5a.75.75 0 01-1.5 0V4.81L8.03 8.03a.75.75 0 01-1.06-1.06l4.5-4.5zM3 15.75a.75.75 0 01.75.75v2.25a1.5 1.5 0 001.5 1.5h13.5a1.5 1.5 0 001.5-1.5V16.5a.75.75 0 011.5 0v2.25a3 3 0 01-3 3H5.25a3 3 0 01-3-3V16.5a.75.75 0 01.75-.75z"
                  clip-rule="evenodd"></path>
              </svg>
            </label>
          </div>
          <p
            style="padding:5px; cursor:pointer; border: 2px solid var(--settings-1)"
            onclick="clearDatabase(); location.reload(); "
          >
            Clear Library
          </p>
        </div>
        <br /><br /><br />
      </div>
    </div>
    <div class="bottom-wrap desktop" id="sidebarWrap">
      <div class="song-photo">
        <img
          src="/mlib/default.jpg"
          class="photo-style"
          alt="Song Photo"
          id="songPhoto"
        />
      </div>

      <div class="midd">
        <div class="song-title-container">
          <p class="song-artist" id="songArtist">Unknown Artist</p>
          <h1 class="song-title" id="songTitle">Unknown Song</h1>
        </div>

        <div class="controls">
          <div class="back-arrow" id="backArrow" onclick="goBack(); ">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="currentColor"
              style="color:white;"
              class="w-6 h-6"
            >
              <path
                d="M9.195 18.44c1.25.713 2.805-.19 2.805-1.629v-2.34l6.945 3.968c1.25.714 2.805-.188 2.805-1.628V8.688c0-1.44-1.555-2.342-2.805-1.628L12 11.03v-2.34c0-1.44-1.555-2.343-2.805-1.629l-7.108 4.062c-1.26.72-1.26 2.536 0 3.256l7.108 4.061z"
              ></path>
            </svg>
          </div>

          <div class="pause-play" id="pause" onclick="pausePlay(); ">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              style="color:white; height: 25px; width: 25px;"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zM9 8.25a.75.75 0 00-.75.75v6c0 .414.336.75.75.75h.75a.75.75 0 00.75-.75V9a.75.75 0 00-.75-.75H9zm5.25 0a.75.75 0 00-.75.75v6c0 .414.336.75.75.75H15a.75.75 0 00.75-.75V9a.75.75 0 00-.75-.75h-.75z"
                clip-rule="evenodd"></path>
            </svg>
          </div>

          <div class="forward-arrow" id="forwardArrow" onclick="goForward(); ">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="currentColor"
              style="color:white;"
              class="w-6 h-6"
            >
              <path
                d="M5.055 7.06c-1.25-.714-2.805.189-2.805 1.628v8.123c0 1.44 1.555 2.342 2.805 1.628L12 14.471v2.34c0 1.44 1.555 2.342 2.805 1.628l7.108-4.061c1.26-.72 1.26-2.536 0-3.256L14.805 7.06C13.555 6.346 12 7.25 12 8.688v2.34L5.055 7.06z"
              ></path>
            </svg>
          </div>
        </div>

        <div class="progress-container">
          <p
            style="position: absolute; margin-left: 18vw; font-size: 1.5vh;"
            id="currentTime"
          >
            00:00/00:00
          </p>
          <div class="progress-bar" id="progressBar"></div>
        </div>
      </div>

      <div class="volume-icon" id="mute" onclick="mutePlay();">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          class="w-6 h-6"
        >
          <path
            d="M13.5 4.06c0-1.336-1.616-2.005-2.56-1.06l-4.5 4.5H4.508c-1.141 0-2.318.664-2.66 1.905A9.76 9.76 0 001.5 12c0 .898.121 1.768.35 2.595.341 1.24 1.518 1.905 2.659 1.905h1.93l4.5 4.5c.945.945 2.561.276 2.561-1.06V4.06zM18.584 5.106a.75.75 0 011.06 0c3.808 3.807 3.808 9.98 0 13.788a.75.75 0 11-1.06-1.06 8.25 8.25 0 000-11.668.75.75 0 010-1.06z"
          ></path>
          <path
            d="M15.932 7.757a.75.75 0 011.061 0 6 6 0 010 8.486.75.75 0 01-1.06-1.061 4.5 4.5 0 000-6.364.75.75 0 010-1.06z"
          ></path>
        </svg>
      </div>

      <div class="volume-icon-mute" id="muted">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          class="w-6 h-6"
        >
          <path
            d="M13.5 4.06c0-1.336-1.616-2.005-2.56-1.06l-4.5 4.5H4.508c-1.141 0-2.318.664-2.66 1.905A9.76 9.76 0 001.5 12c0 .898.121 1.768.35 2.595.341 1.24 1.518 1.905 2.659 1.905h1.93l4.5 4.5c.945.945 2.561.276 2.561-1.06V4.06zM17.78 9.22a.75.75 0 10-1.06 1.06L18.44 12l-1.72 1.72a.75.75 0 001.06 1.06l1.72-1.72 1.72 1.72a.75.75 0 101.06-1.06L20.56 12l1.72-1.72a.75.75 0 00-1.06-1.06l-1.72 1.72-1.72-1.72z"
          ></path>
        </svg>
      </div>

      <div id="musicSettings" class="hide"></div>
      <div id="musicSettingsContainer" class="hide"></div>
      <div class="volume-container">
        <input
          type="range"
          id="volumeControl"
          min="0"
          max="1"
          step="0.01"
          value="1"
          class="volumeSlide"
        />
      </div>
    </div>

    <div class="hide">
      <h1>Your Library</h1>

      <input id="f" type="file" multiple />
      <div id="songData"></div>
    </div>
    <audio style="display:none;" id="audio"></audio>
    <div style="display:none;" id="server"></div>
    <script is:inline src="/js/mlib/jsmediatags.min.js"></script>
    <script is:inline>
      songs = [];
      aud = document.getElementById("audio");
      document.body.appendChild(aud);
      currentSongIndex = 0;
      isPlaying = false;
      async function playSong(songTitle) {
        const db = await openSongsDB();
        const transaction = db.transaction(["songs"], "readonly");
        const objectStore = transaction.objectStore("songs");

        songs = await new Promise((resolve, reject) => {
          const request = objectStore.getAllKeys();
          request.onsuccess = function (event) {
            const keys = event.target.result;
            resolve(keys);
          };
          request.onerror = reject;
        });

        currentSongIndex = songs.indexOf(songTitle);
        if (currentSongIndex < 0) {
          console.error(`Song not found: ${songTitle}`);
          return;
        }

        const songData = await new Promise((resolve, reject) => {
          const getRequest = objectStore.get(songs[currentSongIndex]);
          getRequest.onsuccess = function (event) {
            const songData = event.target.result.data;
            resolve(songData);
          };
          getRequest.onerror = reject;
        });

        // pause the previous audio element before creating a new one
        if (aud) {
          aud.pause();
        }

        aud = new Audio(songData);
        isPlaying = !aud.paused;
        aud.play();
        getID3Data(songData);
        progressBar();
        logCurrentTime();
        raiseSidebar();

        // Automatically play the next song when this one is done
        aud.addEventListener("ended", function () {
          if (currentSongIndex === songs.length - 1) {
            currentSongIndex = 0;
          } else {
            currentSongIndex += 1;
          }
          playSong(songs[currentSongIndex]);
        });
      }

      document
        .getElementById("songData")
        .addEventListener("click", function (event) {
          // pause the current audio if it's being played and a different song is clicked
          if (aud && isPlaying) {
            aud.pause();
          }

          // update the current song index based on the song being clicked
          currentSongIndex = songs.indexOf(
            event.target.innerHTML.replace(" ", "_")
          );
          playSong(songs[currentSongIndex]);
        });

      document
        .getElementById("volumeControl")
        .addEventListener("input", function (event) {
          if (aud) {
            aud.volume = event.target.value;
          }
        });
      function goBack() {
        if (aud) {
          aud.pause();
        }
        // Decrement the index, wrapping around to the end of the array if necessary
        currentSongIndex = (currentSongIndex + songs.length - 1) % songs.length;
        playSong(songs[currentSongIndex]);
      }

      function goForward() {
        if (aud) {
          aud.pause();
        }
        // Increment the index, wrapping around to the beginning of the array if necessary
        currentSongIndex = (currentSongIndex + 1) % songs.length;
        playSong(songs[currentSongIndex]);
      }

      function pausePlay() {
        let pause = document.getElementById("pause");

        // updated the isPlaying flag based on the state of audio
        if (aud && !aud.paused) {
          aud.pause();
          isPlaying = false;
        } else if (aud) {
          aud.play();
          isPlaying = true;
        }
      }

      function mutePlay() {
        let mute = document.getElementById("mute");
        let muted = document.getElementById("muted");

        if (aud && !aud.muted) {
          aud.muted = true;
          muted.style.display = "block";
          mute.style.display = "none";
        }
      }

      function unmutePlay() {
        if (aud && aud.muted) {
          aud.muted = false;
          mute.style.display = "block";
          muted.style.display = "none";
        }
      }

      function progressBar() {
        if (!isPlaying) {
          setInterval(function () {
            const currentTime = aud.currentTime;
            const duration = aud.duration;
            const progress = (currentTime / duration) * 100;
            document.getElementById("progressBar").style.width = `${progress}%`;
          }, 1000); // update the progress bar every 1000 milliseconds (1 second)
        }
      }

      function wait(ms) {
        var start = new Date().getTime();
        var end = start;
        while (end < start + ms) {
          end = new Date().getTime();
        }
      }

      function logCurrentTime() {
        if (document.getElementById("progressBar") == null) {
          wait(1000);
        } else {
          let timeDiv = document.getElementById("currentTime");
          setInterval(function () {
            const currentTime = aud.currentTime;
            const duration = aud.duration;
            const elapsedMinutes = Math.floor(currentTime / 60);
            const elapsedSeconds = Math.floor(currentTime % 60);
            const totalMinutes = Math.floor(duration / 60);
            const totalSeconds = Math.floor(duration % 60);
            const timeString =
              `${elapsedMinutes.toString().padStart(2, "0")}:${elapsedSeconds
                .toString()
                .padStart(2, "0")}/` +
              `${totalMinutes.toString().padStart(2, "0")}:${totalSeconds
                .toString()
                .padStart(2, "0")}`;
            timeDiv.innerHTML = timeString;
          }, 1000); // update the log every 1000 milliseconds (1 second)
        }
      }

      async function openSongsDB() {
        const dbName = "songs_db";
        const dbVersion = 2;

        return new Promise((resolve, reject) => {
          const request = indexedDB.open(dbName, dbVersion);

          request.onerror = function (event) {
            console.error("IndexedDB error: ", event.target.errorCode);
            reject(event.target.errorCode);
          };

          request.onsuccess = function (event) {
            const db = event.target.result;
            console.log("Database opened successfully");
            resolve(db);
          };
        });
      }

      function getSong(objectStore, name) {
        return new Promise((resolve, reject) => {
          const request = objectStore.get(name);

          request.onerror = function (event) {
            reject(new Error("Error retrieving song from database"));
          };

          request.onsuccess = function (event) {
            const song = event.target.result;
            if (!song) {
              const error = new Error(`Song '${name}' not found in database`);
              error.name = "SongNotFoundError";
              reject(error);
              return;
            }

            if (song.image) {
              const imageData = song.image;
              const dataUrl = imageData;
              song.image = dataUrl;
            }

            song.data = URL.createObjectURL(
              new Blob([song.data], {
                type: "audio/mpeg"
              })
            );
            resolve(song);
          };
        });
      }

      function getID3Data(songData, isUpload, fileName) {
        try {
          let x = dataURItoBlob(songData);
          jsmediatags.read(x, {
            onSuccess: function (tag) {
              console.log(tag);
              let title = tag.tags.title
                ? tag.tags.title.replace(/'/g, "")
                : fileName.replace(/'/g, "");
              let artist = tag.tags.artist
                ? tag.tags.artist.replace(/'/g, "")
                : "";
              let album = tag.tags.album
                ? tag.tags.album.replace(/'/g, "")
                : "";
              let year = tag.tags.year || "";
              let picture = tag.tags.picture;
              let trackNum = tag.tags.track || "";

              let imageStr = null;
              if (picture) {
                let base64String = "";
                for (let i = 0; i < picture.data.length; i++) {
                  base64String += String.fromCharCode(picture.data[i]);
                }
                let base64 =
                  "data:" +
                  picture.format +
                  ";base64," +
                  window.btoa(base64String);
                imageStr = base64;
              } else {
                imageStr = "/mlib/default.jpg";
              }

              if (isUpload) {
                const openRequest = indexedDB.open("songs_db", 2);
                openRequest.onupgradeneeded = function (event) {
                  const db = event.target.result;
                  if (!db.objectStoreNames.contains("songs")) {
                    db.createObjectStore("songs", { keyPath: "name" });
                  }
                };

                openRequest.onsuccess = function (event) {
                  const db = event.target.result;
                  const transaction = db.transaction(["songs"], "readwrite");
                  const objectStore = transaction.objectStore("songs");
                  objectStore.add({
                    name: title,
                    artist: artist,
                    album: album,
                    year: year,
                    data: songData,
                    image: imageStr,
                    filename: fileName,
                    track: trackNum
                  });
                  localStorage.setItem("loaded", "1");
                };

                openRequest.onerror = function (event) {
                  console.error("IndexedDB error: ", event.target.errorCode);
                };
              }

              let songTitle = document.getElementById("songTitle");
              if (title === null || title === undefined || title === "") {
                title = fileName;
                localStorage.setItem("songTitle", title);
              } else {
                songTitle.innerHTML = title;
                localStorage.setItem("songTitle", title);
              }
              let songArtist = document.getElementById("songArtist");
              if (artist === null || artist === undefined || artist === "") {
                artist = "Unknown Artist";
                localStorage.setItem("songArtist", artist);
              } else {
                songArtist.innerHTML = artist;
                localStorage.setItem("songArtist", artist);
              }

              let songAlbum;
              if (album === null || album === undefined || album === "") {
                album = "Unknown Album";
                localStorage.setItem("songAlbum", album);
              } else {
                songAlbum = album;
                localStorage.setItem("songAlbum", album);
              }
              let songPhoto = document.getElementById("songPhoto");
              if (imageStr) {
                songPhoto.src = imageStr;
                localStorage.setItem("songArt", imageStr);
              } else {
                console.log("No picture found.");
              }
              console.log("Title: " + title + ", Artist: " + artist);
              if (!isUpload) {
                let duration = aud.duration;
              }
            },
            onError: function (error) {
              console.log(":(", error.type, error.info);
              let title = tag.tags.title
                ? tag.tags.title.replace(/'/g, "")
                : fileName.replace(/'/g, "");
              let artist = tag.tags.artist
                ? tag.tags.artist.replace(/'/g, "")
                : "";
              let album = tag.tags.album
                ? tag.tags.album.replace(/'/g, "")
                : "";
              let year = "" || "Unknown Year";
              let imageStr = "assets/defaultSong.jpg";
              let trackNum = "" || "Unknown Track Number";
              let songTitle = document.getElementById("songTitle");
              songTitle.innerHTML = title;
              localStorage.setItem("songTitle", title);

              let songArtist = document.getElementById("songArtist");
              songArtist.innerHTML = artist;
              localStorage.setItem("songArtist", artist);

              let songAlbum = album;
              localStorage.setItem("songAlbum", album);

              let songPhoto = document.getElementById("songPhoto");
              songPhoto.src = imageStr;
              localStorage.setItem("songArt", imageStr);
              if (isUpload) {
                const openRequest = indexedDB.open("songs_db", 2);
                openRequest.onupgradeneeded = function (event) {
                  const db = event.target.result;
                  if (!db.objectStoreNames.contains("songs")) {
                    db.createObjectStore("songs", { keyPath: "name" });
                  }
                };

                openRequest.onsuccess = function (event) {
                  const db = event.target.result;
                  const transaction = db.transaction(["songs"], "readwrite");
                  const objectStore = transaction.objectStore("songs");
                  objectStore.add({
                    name: title,
                    artist: artist,
                    album: album,
                    year: year,
                    data: songData,
                    image: imageStr,
                    filename: fileName,
                    track: trackNum
                  });
                  localStorage.setItem("loaded", "1");
                };
              }
            }
          });
        } catch (e) {
          console.log(e);
        }
      }

      function dataURItoBlob(dataURI) {
        // convert base64 to raw binary data held in a string
        // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
        var byteString = atob(dataURI.split(",")[1]);

        // separate out the mime component
        var mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];

        // write the bytes of the string to an ArrayBuffer
        var ab = new ArrayBuffer(byteString.length);

        // create a view into the buffer
        var ia = new Uint8Array(ab);

        // set the bytes of the buffer to the correct values
        for (var i = 0; i < byteString.length; i++) {
          ia[i] = byteString.charCodeAt(i);
        }

        // write the ArrayBuffer to a blob, and you're done
        var blob = new Blob([ab], {
          type: mimeString
        });
        return blob;
      }

      function raiseSidebar() {
        let title = document.getElementById("songTitle");
        let artist = document.getElementById("songArtist");
        let picture = document.getElementById("songPhoto");
        let songTitle = localStorage.getItem("songTitle");
        let songArtist = localStorage.getItem("songArtist");
        let songArt = localStorage.getItem("songArt");

        if (songTitle === null) {
          songTitle = "Unknown Title";
        }
        if (songArtist === null) {
          songArtist = "Unknown Artist";
        }
        if (songArt === null) {
        } else {
          title.innerHTML = songTitle;
          artist.innerHTML = songArtist;
          picture.src = songArt;
        }
        progressBar();
        logCurrentTime();
      }
    </script>

    <script is:inline>
      window.addEventListener("router:end", (_) => {
        if (!window.location.pathname.startsWith("/music/")) {
          return;
        }
      });
      function displayAllSongs(isMore, maxSongs = 15, resetPlayer) {
        const openRequest = indexedDB.open("songs_db", 2);

        openRequest.onupgradeneeded = function (event) {
          const db = event.target.result;
          if (!db.objectStoreNames.contains("songs")) {
            db.createObjectStore("songs", {
              keyPath: "name"
            });
          }
        };

        openRequest.onsuccess = function (event) {
          const db = event.target.result;
          const transaction = db.transaction(["songs"], "readonly");
          const objectStore = transaction.objectStore("songs");
          let songName;
          const songsDiv = document.getElementById("songsDiv");
          songsDiv.innerHTML = "";
          let i = 0;

          if (isMore) {
            songsDiv.innerHTML = "";
          }

          objectStore.openCursor().onsuccess = function (event) {
            const cursor = event.target.result;
            if (cursor && i < maxSongs) {
              i++;
              const song = cursor.value;
              if (song.name == "Unknown Title") {
                songName = song.filename;
              } else {
                songName = song.name;
              }
              if (song.artist == "Unknown Artist") {
                song.artist = "";
              }
              const songDiv = document.createElement("div");
              songDiv.classList.add("songDiv");
              songDiv.innerHTML = `<img loading="lazy" class="songImage" src="${
                song.image || "../assets/defaultSong.jpg"
              }" onclick="playSong('${song.name}'); currentSongIndex = ${i};">
            <div class="songTitle">${songName}</div>
            <div class="songArtist">${song.artist || ""}</div>`;
              songsDiv.appendChild(songDiv);
              cursor.continue();
            } else {
              if (!isMore && i < maxSongs && cursor.count > maxSongs) {
                const showMoreSongs = function () {
                  displayAllSongs(true, cursor.count);
                };
                const showAllSongsBtn = document.createElement("div");
                showAllSongsBtn.classList.add("show-moreSongs");
                showAllSongsBtn.innerText = "Show All Songs";
                showAllSongsBtn.addEventListener("click", showMoreSongs);
                songsDiv.appendChild(showAllSongsBtn);
              }
            }
          };
        };

        openRequest.onerror = function (event) {
          console.error("IndexedDB error: ", event.target.errorCode);
        };

        const slider = document.getElementById("song-count");
        let timeoutId;

        slider.oninput = function () {
          const songCount = this.value;
          clearTimeout(timeoutId);
          timeoutId = setTimeout(() => {
            displayAllSongs(false, songCount);
          }, 1000);
        };
      }
      displayAllSongs();

      function createEventListeners() {
        let menuExpand = document.getElementById("menuExpand");
        let hamburgerMenu = document.getElementById("hamburgerMenu");
        let menuExpanded = document.getElementById("menuExpanded");
        let menuContent = document.getElementById("menuContent");
        let navBar = document.getElementById("nav");
        menuExpand.addEventListener("click", function () {
          if (menuExpanded.classList.contains("menuExpandOpen")) {
            menuExpanded.classList.remove("menuExpandOpen");
            menuExpanded.classList.add("menuExpandClosed");
            menuExpanded.style.height = "";
            menuExpanded.style.width = "";
            menuContent.style.display = "none";
            navBar.style.display = "none";
          } else {
            menuExpanded.classList.remove("menuExpandClosed");
            menuExpanded.classList.add("menuExpandOpen");
            hamburgerMenu.style.height = "";
            hamburgerMenu.style.width = "";
            menuContent.style.display = "block";
            navBar.style.display = "block";
          }
        });
        let nameTitle = document.getElementById("nameTitle");
        if (localStorage.getItem("referredName") === null) {
          nameTitle.innerHTML = "Hello User!";
        } else {
          nameTitle.innerHTML =
            "Hello " + localStorage.getItem("referredName") + "!";
        }
      }

      function resizeGrid() {
        let subheadings = document.getElementsByClassName("subheading");
        if (subheadings[0].style.fontSize === "2vw") {
          // Revert all back to default values
          for (let i = 0; i < subheadings.length; i++) {
            subheadings[i].style.fontSize = "";
          }
          let songTitles = document.getElementsByClassName("song-Title");
          for (let i = 0; i < songTitles.length; i++) {
            songTitles[i].style.display = "";
          }
          let songImages = document.getElementsByClassName("song-image");
          for (let i = 0; i < songImages.length; i++) {
            songImages[i].style.width = "";
            songImages[i].style.height = "";
          }
          let songImage = document.getElementsByClassName("songImage");
          for (let i = 0; i < songImage.length; i++) {
            songImage[i].style.width = "10vw";
            songImage[i].style.height = "10vw";
            songImage[i].style.marginLeft = "";
          }
          // Get all elements with songArtist, songAlbum, songYear and display them
          let songArtist = document.getElementsByClassName("songArtist");
          for (let i = 0; i < songArtist.length; i++) {
            songArtist[i].style.display = "";
          }
          let resizeColor = document.getElementById("resizeColor");
          resizeColor.style.color = "var(--h1-color)";
        } else {
          //For each subheading change font size to 2vw
          for (let i = 0; i < subheadings.length; i++) {
            subheadings[i].style.fontSize = "2vw";
          }
          // Get all elements with the class song-Title and don't display them
          let songTitles = document.getElementsByClassName("song-Title");
          for (let i = 0; i < songTitles.length; i++) {
            songTitles[i].style.display = "none";
          }
          // Get all elements with the class song-Image and change their width to 10vw
          let songImages = document.getElementsByClassName("song-image");
          for (let i = 0; i < songImages.length; i++) {
            songImages[i].style.width = "5vw";
            songImages[i].style.height = "5vw";
          }
          // Get all elements with the name songImage and change their width and height to 4vw
          let songImage = document.getElementsByClassName("songImage");
          for (let i = 0; i < songImage.length; i++) {
            songImage[i].style.width = "4vw";
            songImage[i].style.height = "4vw";
            songImage[i].style.marginLeft = "3vw";
          }

          // Get all elements with songTitle, songArtist, songAlbum, songYear and don't display them
          let songArtist = document.getElementsByClassName("songArtist");
          for (let i = 0; i < songArtist.length; i++) {
            songArtist[i].style.display = "none";
          }
          let resizeColor = document.getElementById("resizeColor");
          resizeColor.style.color = "var(--media-icon-color)";
        }
      }

      function showAlbums() {
        const openRequest = indexedDB.open("songs_db", 2);
        openRequest.onerror = (event) => {
          console.log("Failed to open database");
        };
        openRequest.onsuccess = (event) => {
          const db = event.target.result;
          const transaction = db.transaction("songs", "readonly");
          const objectStore = transaction.objectStore("songs");
          const request = objectStore.getAll();

          request.onsuccess = (event) => {
            const songs = event.target.result;
            const albumCounts = {};

            songs.forEach((song) => {
              const album = song.album;
              if (album) {
                if (albumCounts[album]) {
                  albumCounts[album]++;
                } else {
                  albumCounts[album] = 1;
                }
              }
            });

            const albums = Object.keys(albumCounts).filter(
              (album) => albumCounts[album] > 1
            );

            const albumList = document.getElementById("albumsDiv");
            albumList.innerHTML = "";

            albums.forEach((album) => {
              const albumDiv = document.createElement("div");
              albumDiv.classList.add("album");

              const albumArt = document.createElement("img");
              albumArt.classList.add("album-art");
              albumArt.src = songs.find((song) => song.album === album).image;
              // Add onclick that will link to albuminfo.html with query of ?album=albumName
              albumArt.onclick = () => {
                let url = "/album?album=" + album;
                window.open(url, "_blank").focus();
              };

              const albumName = document.createElement("p");
              albumName.classList.add("album-name");
              albumName.textContent = album;

              albumDiv.appendChild(albumArt);
              albumDiv.appendChild(albumName);

              albumList.appendChild(albumDiv);
            });
          };

          request.onerror = (event) => {
            console.log("Failed to get songs");
          };
        };
      }

      showAlbums();

      function dataURItoBlob(dataURI) {
        // convert base64 to raw binary data held in a string
        // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
        var byteString = atob(dataURI.split(",")[1]);

        // separate out the mime component
        var mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];

        // write the bytes of the string to an ArrayBuffer
        var ab = new ArrayBuffer(byteString.length);

        // create a view into the buffer
        var ia = new Uint8Array(ab);

        // set the bytes of the buffer to the correct values
        for (var i = 0; i < byteString.length; i++) {
          ia[i] = byteString.charCodeAt(i);
        }

        // write the ArrayBuffer to a blob, and you're done
        var blob = new Blob([ab], {
          type: mimeString
        });
        return blob;
      }

      function autoSetXenBg() {
        var autoChange = localStorage.getItem("autoXenBg");
        if (autoChange == "on") {
          setXenBg();
        }
      }

      function setXenBg() {
        const { parent } = xen;
        let currentBg = localStorage.getItem("songArt");
        let bgSet = dataURItoBlob(currentBg);
        let url = URL.createObjectURL(bgSet);
        parent.send("albumBg", url);
      }

      function sendXenNoti() {
        const { parent } = xen;
        var songTitle = localStorage.getItem("songTitle");
        var songArt = localStorage.getItem("songArt");
        var artist = localStorage.getItem("songArtist");
        parent.send("notiSend", songTitle, songArt, artist);
      }

      function autoSendNoti() {
        var notiSend = localStorage.getItem("autoNotiSend");
        if (notiSend == "on") {
          sendXenNoti();
        }
      }

      var jsmediatags = window.jsmediatags;
      // AUDIO HANDLING

      f.onchange = (e) => {
        const files = f.files;
        for (let i = 0; i < files.length; i++) {
          if (files[i].type.indexOf("audio/") !== 0) {
            console.warn(`File ${files[i].name} is not an audio file`);
            continue;
          }

          const reader = new FileReader();
          reader.onload = function () {
            const str = this.result;
            const fileName = files[i].name
              .replace(/\s/g, "_")
              .replace(/'/g, "");
            // Get the ID3 data for the song
            getID3Data(str, true, fileName, function (id3Data) {
              // Add the song data and ID3 data to indexedDB
              const openRequest = indexedDB.open("songs_db", 2);
              openRequest.onupgradeneeded = function (event) {
                const db = event.target.result;
                if (!db.objectStoreNames.contains("songs")) {
                  db.createObjectStore("songs", { keyPath: "name" });
                }
              };

              openRequest.onsuccess = function (event) {
                const db = event.target.result;
                const transaction = db.transaction(["songs"], "readwrite");
                const objectStore = transaction.objectStore("songs");
                objectStore.add({
                  name: fileName,
                  data: str,
                  id3Data: id3Data
                });
                aud = new Audio(str);
                localStorage.setItem("loaded", "1");
              };

              openRequest.onerror = function (event) {
                console.error("IndexedDB error: ", event.target.errorCode);
              };
            });
          };

          reader.readAsDataURL(files[i]);
        }
      };

      function clearDatabase() {
        const openRequest = indexedDB.open("songs_db", 2);
        openRequest.onsuccess = function (event) {
          const db = event.target.result;
          const transaction = db.transaction(["songs"], "readwrite");
          const objectStore = transaction.objectStore("songs");
          const objectStoreRequest = objectStore.clear();

          objectStoreRequest.onsuccess = function (event) {
            console.log("Successfully cleared the object store.");
          };

          objectStoreRequest.onerror = function (event) {
            console.error(
              "Failed to clear the object store: ",
              event.target.errorCode
            );
          };
        };
        localStorage.setItem("loaded", "0");
        openRequest.onerror = function (event) {
          console.error("IndexedDB error: ", event.target.errorCode);
        };
      }

      function getID3Data(songData, isUpload, fileName) {
        try {
          let x = dataURItoBlob(songData);
          jsmediatags.read(x, {
            onSuccess: function (tag) {
              console.log(tag);
              let title = tag.tags.title
                ? tag.tags.title.replace(/'/g, "")
                : fileName.replace(/'/g, "");
              let artist = tag.tags.artist
                ? tag.tags.artist.replace(/'/g, "")
                : "";
              let album = tag.tags.album
                ? tag.tags.album.replace(/'/g, "")
                : "";
              let year = tag.tags.year || "";
              let picture = tag.tags.picture;
              let trackNum = tag.tags.track || "";

              let imageStr = null;
              if (picture) {
                let base64String = "";
                for (let i = 0; i < picture.data.length; i++) {
                  base64String += String.fromCharCode(picture.data[i]);
                }
                let base64 =
                  "data:" +
                  picture.format +
                  ";base64," +
                  window.btoa(base64String);
                imageStr = base64;
              } else {
                imageStr = "/mlib/default.jpg";
              }

              if (isUpload) {
                const openRequest = indexedDB.open("songs_db", 2);
                openRequest.onupgradeneeded = function (event) {
                  const db = event.target.result;
                  if (!db.objectStoreNames.contains("songs")) {
                    db.createObjectStore("songs", { keyPath: "name" });
                  }
                };

                openRequest.onsuccess = function (event) {
                  const db = event.target.result;
                  const transaction = db.transaction(["songs"], "readwrite");
                  const objectStore = transaction.objectStore("songs");
                  objectStore.add({
                    name: title,
                    artist: artist,
                    album: album,
                    year: year,
                    data: songData,
                    image: imageStr,
                    filename: fileName,
                    track: trackNum
                  });
                  localStorage.setItem("loaded", "1");
                };

                openRequest.onerror = function (event) {
                  console.error("IndexedDB error: ", event.target.errorCode);
                };
              }

              let songTitle = document.getElementById("songTitle");
              if (title === null || title === undefined || title === "") {
                title = fileName;
                localStorage.setItem("songTitle", title);
              } else {
                songTitle.innerHTML = title;
                localStorage.setItem("songTitle", title);
              }
              let songArtist = document.getElementById("songArtist");
              if (artist === null || artist === undefined || artist === "") {
                artist = "Unknown Artist";
                localStorage.setItem("songArtist", artist);
              } else {
                songArtist.innerHTML = artist;
                localStorage.setItem("songArtist", artist);
              }

              let songAlbum;
              if (album === null || album === undefined || album === "") {
                album = "Unknown Album";
                localStorage.setItem("songAlbum", album);
              } else {
                songAlbum = album;
                localStorage.setItem("songAlbum", album);
              }
              let songPhoto = document.getElementById("songPhoto");
              if (imageStr) {
                songPhoto.src = imageStr;
                localStorage.setItem("songArt", imageStr);
              } else {
                console.log("No picture found.");
              }
              console.log("Title: " + title + ", Artist: " + artist);
              autoSetXenBg();
              autoSendNoti();
              if (!isUpload) {
                let duration = aud.duration;
              }
            },
            onError: function (error) {
              console.log(":(", error.type, error.info);
              let title = tag.tags.title
                ? tag.tags.title.replace(/'/g, "")
                : fileName.replace(/'/g, "");
              let artist = tag.tags.artist
                ? tag.tags.artist.replace(/'/g, "")
                : "";
              let album = tag.tags.album
                ? tag.tags.album.replace(/'/g, "")
                : "";
              let year = "" || "Unknown Year";
              let imageStr = "assets/defaultSong.jpg";
              let trackNum = "" || "Unknown Track Number";
              let songTitle = document.getElementById("songTitle");
              songTitle.innerHTML = title;
              localStorage.setItem("songTitle", title);

              let songArtist = document.getElementById("songArtist");
              songArtist.innerHTML = artist;
              localStorage.setItem("songArtist", artist);

              let songAlbum = album;
              localStorage.setItem("songAlbum", album);

              let songPhoto = document.getElementById("songPhoto");
              songPhoto.src = imageStr;
              localStorage.setItem("songArt", imageStr);
              if (isUpload) {
                const openRequest = indexedDB.open("songs_db", 2);
                openRequest.onupgradeneeded = function (event) {
                  const db = event.target.result;
                  if (!db.objectStoreNames.contains("songs")) {
                    db.createObjectStore("songs", { keyPath: "name" });
                  }
                };

                openRequest.onsuccess = function (event) {
                  const db = event.target.result;
                  const transaction = db.transaction(["songs"], "readwrite");
                  const objectStore = transaction.objectStore("songs");
                  objectStore.add({
                    name: title,
                    artist: artist,
                    album: album,
                    year: year,
                    data: songData,
                    image: imageStr,
                    filename: fileName,
                    track: trackNum
                  });
                  localStorage.setItem("loaded", "1");
                };
              }
            }
          });
        } catch (e) {
          console.log(e);
        }
      }

      function padTime(num) {
        return num < 10 ? "0" + num : num;
      }

      // format time in seconds to mm:ss format
      function formatTime(time) {
        if (typeof time !== "number") {
          return "--:--";
        }

        const hours = Math.floor(time / 3600);
        const minutes = Math.floor((time % 3600) / 60);
        const seconds = Math.floor(time % 60);

        if (hours > 0) {
          return `${hours}:${padTime(minutes)}:${padTime(seconds)}`;
        } else {
          return `${minutes}:${padTime(seconds)}`;
        }
      }

      function formatMs(time) {
        const minutes = Math.floor(time / 60000);
        const seconds = ((time % 60000) / 1000).toFixed(0);
        return `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;
      }

      function showDevTools() {
        let devTools = document.getElementById("devTools");

        if (devTools.style.display === "block") {
          devTools.style.display = "none";
        } else {
          devTools.style.display = "block";
        }
      }
    </script>
  </div>
</Layout>
